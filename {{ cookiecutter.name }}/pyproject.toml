[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core"]

[tool.poetry]
authors = ["{{ cookiecutter.author }} <{{ cookiecutter.email }}>"]
description = "{{ cookiecutter.description }}"
name = "{{ cookiecutter.name }}"
package-mode = false
readme = "README.md"
version = "0.0.0-dev"

[tool.poetry.dependencies]
bcrypt = "^4.1.3"
django = "^4.2.13"
django-axes = "^6.5.1"
django-behaviors = "^0.5.1"
django-environ = "^0.11.2"
django-filter = "^24.2"
django-healthchecks = "^1.5.0"
django-ipware = "^7.0.1"
django-split-settings = "^1.3.2"
django-storages = "^1.14.4"
djangorestframework = "^3.15.2"
djangorestframework-camel-case = "^1.4.2"
drf-jwt = "^1.19.2"
drf-spectacular = {extras = ["sidecar"], version = "^0.27.2"}
pillow = "^10.1.0"
psycopg2-binary = "^2.9.9"
python = "~3.11"
redis = "^5.0.7"
sentry-sdk = "^2.7.1"
whitenoise = "^6.7.0"

[tool.poetry.group.dev.dependencies]
autoflake = "^2.2.1"
black = "^24.4.2"
django-stubs = "^5.0.2"
djangorestframework-stubs = "^3.15.0"
dotenv-linter = "^0.5.0"
flake8-absolute-import = "^1.0.0.2"
flake8-bugbear = "^24.4.26"
flake8-cognitive-complexity = "^0.1.0"
flake8-django = "^1.4"
flake8-eradicate = "^1.5.0"
flake8-fixme = "^1.1.1"
flake8-pep3101 = "^2.1.0"
flake8-pie = "^0.16.0"
flake8-print = "^5.0.0"
flake8-printf-formatting = "^1.1.2"
flake8-pyproject = "^1.2.3"
flake8-variables-names = "^0.0.6"
flake8-walrus = "^1.2.0"
freezegun = "^1.5.1"
ipython = "^8.26.0"
isort = "^5.12.0"
jedi = "^0.19.1"
mixer = {extras = ["django"], version = "^7.2.2"}
mypy = "^1.10.1"
pymarkdownlnt = "^0.9.21"
pytest-deadfixtures = "^2.2.1"
pytest-django = "^4.7.0"
pytest-env = "^1.1.1"
pytest-freezegun = "^0.4.2"
pytest-mock = "^3.12.0"
pytest-randomly = "^3.15.0"
pytest-xdist = "^3.6.1"
toml-sort = "^0.23.1"
types-freezegun = "^1.1.10"
types-pillow = "^10.2.0.20240520"

[tool.black]
exclude = '''
/(
  | migrations
)/
'''
line_length = 160

[tool.flake8]
exclude = ["__pycache__", "migrations"]
ignore = [
    "E203",  # whitespace before ':'
    "E265",  # block comment should start with '#'
    "E501",  # line too long ({} > {} characters)
    "E704",  # multiple statements on one line (def)
    "F811",  # redefinition of unused name from line {}
    "PT001",  # use @pytest.fixture() over @pytest.fixture
    "SIM102",  # use a single if-statement instead of nested if-statements
    "SIM113",  # use enumerate instead of manually incrementing a counter
]
inline-quotes = '"'

[tool.isort]
include_trailing_comma = true
line_length = 160
multi_line_output = 3
skip = [
    "migrations",
]
src_paths = ["src", "tests"]
use_parentheses = true

[tool.pymarkdown.plugins.md013]
enabled = false

[tool.pymarkdown.plugins.md045]
enabled = false

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "app.settings"
addopts = ["--reuse-db"]
env = [
    "AXES_ENABLED = False",
    "CELERY_ALWAYS_EAGER = True",
    "CI = 1",
    "DISABLE_THROTTLING = True",
]
filterwarnings = [
    "ignore:.*'rest_framework_jwt.blacklist' defines default_app_config.*You can remove default_app_config.::django",
    "ignore:distutils Version classes are deprecated. Use packaging.version instead.:DeprecationWarning:pytest_freezegun:17",
]
markers = [
    "freeze_time: freezing time marker (pytest-freezegun does not register it)",
]
python_files = ["test*.py"]
pythonpath = ". src"

[tool.tomlsort]
all = true
in_place = true
sort_first = ["tool.poetry"]
spaces_before_inline_comment = 2
spaces_indent_inline_array = 4
trailing_comma_inline_array = true
